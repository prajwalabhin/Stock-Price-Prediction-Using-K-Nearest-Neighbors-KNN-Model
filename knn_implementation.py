# -*- coding: utf-8 -*-
"""KNN Implementation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vdd6uxXdtHjjydrdJhnZYmLq2EvjdmKC
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

import yfinance as yf

data = yf.download("ADANIENT.NS")
print(data)

data.head(10)

plt.figure(figsize=(16,8))
plt.plot(data['Close'], label='Close Price history')

data['Open - Close'] = data['Open'] - data['Close']
data['High - Low'] = data['High'] - data['Low']
data = data.drop(['Open', 'High', 'Low', 'Adj Close', 'Volume'], axis=1)

x = data[['Open - Close', 'High - Low']]
x.head()

Yout = np.where(data['Close'].shift(-1) > data['Close'], 1, -1)

Yout

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x, Yout, test_size=0.2, random_state=42)

from sklearn.neighbors import KNeighborsClassifier
from sklearn import neighbors
from sklearn.metrics import accuracy_score
from sklearn.metrics import confusion_matrix
from sklearn.metrics import classification_report
from sklearn.metrics import f1_score
from sklearn.model_selection import GridSearchCV

params = {'n_neighbors':[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]}
knn = neighbors.KNeighborsClassifier()
model = GridSearchCV(knn, params, cv=5)

model.fit(x_train, y_train)

accuracy_train = accuracy_score(y_train, model.predict(x_train))
accuracy_test = accuracy_score(y_test, model.predict(x_test))

print('Accuracy train: {}'.format(accuracy_train))
print('Accuracy test: {}'.format(accuracy_test))

print('Best score: {}'.format(model.best_score_))
print('Best parameters: {}'.format(model.best_params_))

prediction_classification = model.predict(x_test)

actual_predicted_data = pd.DataFrame({'Actual': y_test, 'Predicted': prediction_classification})
actual_predicted_data

actual_predicted_data.head(10)

y = data['Close']
y

"""**Implemenation of KNN Regression**"""

from sklearn.neighbors import KNeighborsRegressor
from sklearn.metrics import mean_squared_error
from sklearn import neighbors

X_train_reg, X_test_reg, y_train_reg, y_test_reg = train_test_split(x, y, test_size=0.2, random_state=42)

params = {'n_neighbors':[1,2,3,4,5,6,7,8,9,10,11,12,13,14, 15, 16]}
knn_reg = neighbors.KNeighborsRegressor()
model_reg = GridSearchCV(knn_reg, params, cv=5)

model_reg.fit(X_train_reg, y_train_reg)
predictions = model_reg.predict(X_test_reg)

print(predictions)

rms = np.sqrt(mean_squared_error(y_test_reg, predictions))
print(rms)

valid = pd.DataFrame({'Actual': y_test_reg, 'Predicted': predictions})
valid.head(20)