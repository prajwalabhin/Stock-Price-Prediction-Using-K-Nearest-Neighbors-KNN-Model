# -*- coding: utf-8 -*-
"""Stock_Prediction_SP500.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1R_Hg1KKobGhTsYqDCu-6uHA2FJ9umLTQ

**Downloading S&P 500 Price Data**
"""

import yfinance as yf

sp500 = yf.Ticker("^GSPC")

sp500 = sp500.history(period="max")

sp500

sp500.to_csv("sp500.csv")

sp500.index

"""**Cleaning and Visualising our Stock Market Data**"""

sp500.plot.line(y='Close', use_index=True)

del sp500['Dividends']
del sp500['Stock Splits']

"""Setting Up our Targer for Machine Learning"""

sp500["Tomorrow"] = sp500["Close"].shift(-1)

sp500

sp500["Target"] = (sp500["Tomorrow"] > sp500["Close"]).astype(int)
sp500

sp500 = sp500.loc["1990-01-01":].copy()
sp500

"""**Training an Initial Machine Learning Model**"""

from sklearn.ensemble import RandomForestClassifier

model = RandomForestClassifier(n_estimators=100, min_samples_split=100, random_state=1)
train = sp500.iloc[:-100]
test = sp500.iloc[-100:]

predictors = ["Close", "Volume", "Open", "High", "Low"]
model.fit(train[predictors], train["Target"])

from sklearn.metrics import precision_score

preds = model.predict(test[predictors])

import pandas as pd
preds = pd.Series(preds, index=test.index)

precision_score(test["Target"], preds)

combined = pd.concat([test["Target"], preds], axis=1)
combined.plot()

"""**Building a Backtesting System**"""

def predict(train, test, predictors, model):
    model.fit(train[predictors], train["Target"])
    preds = model.predict(test[predictors])
    preds = pd.Series(preds, index=test.index, name="Predictions")
    combined = pd.concat([test["Target"], preds], axis=1)
    return combined

def backtest(data, model, predictors, start=2500, step=250):
    all_predictions = []

    for i in range(start, data.shape[0], step):
        train = data.iloc[0:i].copy()
        test = data.iloc[i:(i+step)].copy()
        predictions = predict(train, test, predictors, model)
        all_predictions.append(predictions)

    return pd.concat(all_predictions)

predictions = backtest(sp500, model, predictors)

predictions["Predictions"].value_counts()

precision_score(predictions["Target"], predictions["Predictions"])

predictions["Target"].value_counts() / predictions.shape[0]

"""**Adding Additional Predictors to our Model**"""

horizons = [2,5,60,250,1000]
new_predictors = []

for horizon in horizons:
    rolling_averages = sp500.rolling(horizon).mean()

    ratio_column = f"Close_Ratio_{horizon}"
    sp500[ratio_column] = sp500["Close"] / rolling_averages["Close"]

    trend_column = f"Trend_{horizon}"
    sp500[trend_column] = sp500.shift(1).rolling(horizon).sum()["Target"]

    new_predictors+= [ratio_column, trend_column]

sp500 = sp500.dropna()
sp500

"""Improving Our Model"""

model = RandomForestClassifier(n_estimators=200, min_samples_split=500, random_state=1)

def predict(train, test, predictors, model):
    model.fit(train[predictors], train["Target"])
    preds = model.predict_proba(test[predictors]) [:,1]
    preds[preds >= .6] = 1
    preds[preds < .6] = 0
    preds = pd.Series(preds, index=test.index, name="Predictions")
    combined = pd.concat([test["Target"], preds], axis=1)
    return combined

predictions = backtest(sp500, model, new_predictors)

predictions["Predictions"].value_counts()

precision_score(predictions["Target"], predictions["Predictions"])

