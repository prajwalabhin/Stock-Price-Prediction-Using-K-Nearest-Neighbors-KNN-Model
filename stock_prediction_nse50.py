# -*- coding: utf-8 -*-
"""Stock_Prediction_NSE50.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xi4JYrCHV1zjNmHNoA9jGlL8vshjuuFd

**Downloading NSE 50 Price Data**
"""



import yfinance as yf

# Download Nifty 50 Index data
nifty_50 = yf.download("^NSEI")
print(nifty_50)

import yfinance as yf

# List of tickers (Example: Add more NSE tickers)
tickers = ["RELIANCE.NS", "TCS.NS", "INFY.NS", "HDFCBANK.NS"]

# Download data for each ticker
data = yf.download(tickers, group_by="ticker")
data

nifty_50_data = nifty_50
nifty_50_data.to_csv("nifty_50.csv")

nifty_50_data

nifty_50_data.index

"""**Cleaning and Visualising our Stock Market Data**"""

nifty_50_data.plot.line(y='Close', use_index=True)

"""Setting Up our Targer for Machine Learning"""

nifty_50_data["Tomorrow"] = nifty_50_data["Close"].shift(-1)

nifty_50_data

nifty_50_data["Target"] = (nifty_50_data["Tomorrow"] > nifty_50_data["Close"]).astype(int)
nifty_50_data

nifty_50_data = nifty_50_data.loc["1990-01-01":].copy()
nifty_50_data

"""**Training an Initial Machine Learning Model**"""

from sklearn.ensemble import RandomForestClassifier

model = RandomForestClassifier(n_estimators=100, min_samples_split=100, random_state=1)
train = nifty_50_data.iloc[:-100]
test = nifty_50_data.iloc[-100:]

predictors = ["Close", "Volume", "Open", "High", "Low"]
model.fit(train[predictors], train["Target"])

from sklearn.metrics import precision_score

preds = model.predict(test[predictors])

import pandas as pd
preds = pd.Series(preds, index=test.index)

precision_score(test["Target"], preds)

combined = pd.concat([test["Target"], preds], axis=1)
combined.plot()

"""**Building a Backtesting System**"""

def predict(train, test, predictors, model):
    model.fit(train[predictors], train["Target"])
    preds = model.predict(test[predictors])
    preds = pd.Series(preds, index=test.index, name="Predictions")
    combined = pd.concat([test["Target"], preds], axis=1)
    return combined

def backtest(data, model, predictors, start=2500, step=250):
    all_predictions = []

    for i in range(start, data.shape[0], step):
        train = data.iloc[0:i].copy()
        test = data.iloc[i:(i+step)].copy()
        predictions = predict(train, test, predictors, model)
        all_predictions.append(predictions)

    return pd.concat(all_predictions)

predictions = backtest(nifty_50_data, model, predictors)

predictions["Predictions"].value_counts()

precision_score(predictions["Target"], predictions["Predictions"])

predictions["Target"].value_counts() / predictions.shape[0]

"""**Adding Additional Predictors to our Model**"""

horizons = [2, 5, 60, 250, 1000]
new_predictors = []

for horizon in horizons:
    # Calculate the rolling averages
    rolling_averages = nifty_50_data.rolling(horizon).mean()

    # Create the ratio column with .loc[]
    ratio_column = f"Close_Ratio_{horizon}"
    nifty_50_data.loc[:, ratio_column] = nifty_50_data["Close"] / rolling_averages["Close"]

    # Create the trend column with .loc[]
    trend_column = f"Trend_{horizon}"
    nifty_50_data.loc[:, trend_column] = nifty_50_data["Target"].shift(1).rolling(horizon).sum()

    # Append the newly created columns to the list of new predictors
    new_predictors += [ratio_column, trend_column]

# Display the modified DataFrame with new columns
print(nifty_50_data.head())

nifty_50_data = nifty_50_data.dropna()
nifty_50_data

"""Improving Our Model"""

model = RandomForestClassifier(n_estimators=200, min_samples_split=500, random_state=1)

def predict(train, test, predictors, model):
    model.fit(train[predictors], train["Target"])
    preds = model.predict_proba(test[predictors]) [:,1]
    preds[preds >= .6] = 1
    preds[preds < .6] = 0
    preds = pd.Series(preds, index=test.index, name="Predictions")
    combined = pd.concat([test["Target"], preds], axis=1)
    return combined

predictions = backtest(nifty_50_data, model, new_predictors)

predictions["Predictions"].value_counts()

precision_score(predictions["Target"], predictions["Predictions"])

